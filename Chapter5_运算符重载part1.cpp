#include<iostream>
                                                   /*
-----Chapter5.运算符的重载-----
___________________________________________________
  运算符的重载和函数重载一样，就是用相同的名字实现不同的
功能。
  比如，如果我们有一个矩阵类Matrix，对于两个同阶方阵A和
B，如何实现矩阵的相加？直接让他们包含的二维数组一对一相
加是可以的，我们要写这样的循环结构：
  for(i:0~n){for(j:0~n){
             A.G[i][j]+B.G[i][j];}}
这样不仅有些麻烦，可读性也比较差。
如果使用运算符重载，重载"+"这个加法运算符，就可以实现：
                    A + B;
矩阵C便是A和B的和。
  可见这样写的可读性之高，代码之简洁。
―――――――――――――――――――――――――――――――――――――――――――――――――――
>>>>>题目一：账户合并<<<<<
创建一个账户类Account，这个类中包含以下属性：
   *户主名:string name
   *账户编号:string number
   *存款:int balance
   *欠款:int debt
   *账户状态：bool status（启用为1，废弃为0）
包含以下行为：
   *默认构造函数：默认初始值自定
   *有参构造函数
        Account(name,number,balance,debt){} 
   *启用账户 void enable(){}
   *废弃账户 void disable(){}
现有一户主来办理业务，要求把他名下的两个账户合并（这两个
账户的户主名相同，账户编号不同）产生一个新账户，要求保留
户主名，账户编号保留为其中一个，存款、欠款均相加。旧帐户
均废弃，启用新账户。
【要求】
请把"+"作为成员函数进行重载，使得下面这个类中的全局函数
能够正常作用：
Account MergeAccout(Account A, Account B){
    Account C = A + B;
    A.disable();
    B.disable();
    C.enable();
    return C;
}//注意，这是一个全局函数！
最后，请撰写主函数，实例化两个账户A和B，再使用此合并函数
合并为一个新账户C
―――――――――――――――――――――――――――――――――――――――――――――――――――
                                                   */
class Account {
    //To start here

};
                                                   /*
___________________________________________________
>>>>>题目二：输出账户的全部信息<<<<<
输出你在第一题合并后的账户的全部信息。
【要求】
重载左移运算符"<<"，使得以下全局函数能够正常运行：
void getInfo(Account C){
    cout << C << endl;
    //应该输出账户的全部信息！
}
最后，请在主函数中使用此输出函数输出C的全部信息。
―――――――――――――――――――――――――――――――――――――――――――――――――――
                                                   */